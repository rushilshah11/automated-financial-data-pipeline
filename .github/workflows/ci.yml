name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ci_test_user
          POSTGRES_PASSWORD: ci_test_password
          POSTGRES_DB: ci_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ci_test_user -d ci_test_db"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Run tests
        env:
          SQLALCHEMY_DATABASE_URL: postgresql+psycopg2://ci_test_user:ci_test_password@postgres:5432/ci_test_db
          JWT_SECRET_KEY: "super-secret-ci-key"
          JWT_ALGORITHM: "HS256"
          FINNHUB_API_KEY: "dummy-finnhub-key"
          EMAIL_FROM_ADDRESS: "ci@test.com"
          S3_BUCKET_NAME: "ci-test-bucket"
          AWS_ACCESS_KEY_ID: "dummy-key-id"
          AWS_SECRET_ACCESS_KEY: "dummy-secret-key"
          AWS_REGION_NAME: "us-east-1"
        run: |
          echo "Waiting for Postgres to start..."
          
          # FIX: Removed -d ci_test_db from the check to increase success rate
          for i in {1..15}; do
            # Check general connectivity, not specific database readiness
            pg_isready -h postgres -U ci_test_user && break
            echo "Postgres not ready yet ($i/15)..."
            sleep 3
          done
          
          # Use the simplified check again for the final failure or success
          pg_isready -h postgres -U ci_test_user || (echo "Postgres failed to start" && exit 1)
          
          # Once connected, pytest can run. The FastAPI lifespan will then create tables.
          pytest -v
